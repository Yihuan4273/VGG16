import keras
import numpy as np
import pandas as pd
from keras.layers import Dropout
from keras.utils import np_utils
from keras.layers import LSTM , SimpleRNN, GRU
from keras.layers import Dense, Activation
from keras.datasets import mnist
from keras.models import Sequential
from sklearn.model_selection import train_test_split

learning_rate = 0.0001

display_step = 10
 
n_input = 500
n_step = 20
# n_hidden = 512
n_classes = 11
 
# Sum_feature = pd.read_csv('C:\\Users\\yihua\\Desktop\\VMD_Feature\\VMD_ZICAI.csv')  #导入数据集
# label = pd.read_csv('C:\\Users\\yihua\\Desktop\\VMD_Feature\\ZICAI_label.csv')

# Sum_feature = pd.read_csv('C:\\Users\\yihua\\Desktop\\VMD_Feature\\VMD_div.csv')  #导入数据集
# label = pd.read_csv('C:\\Users\\yihua\\Desktop\\VMD_Feature\\label.csv')

# x_train , x_test ,y_train , y_test = train_test_split(Sum_feature, label, test_size=0.3, random_state=10)

x_train =pd.read_csv('C:\\Users\\yihua\\Desktop\\P_x_train.csv')
x_test =pd.read_csv('C:\\Users\\yihua\\Desktop\\P_x_test.csv')
y_train =pd.read_csv('C:\\Users\\yihua\\Desktop\\P_y_train.csv')
y_test =pd.read_csv('C:\\Users\\yihua\\Desktop\\P_y_test.csv')

x_train = x_train.values.reshape(-1,2, 500)
x_test = x_test.values.reshape(-1, 2, 500)
# np.savetxt('C:\\Users\\yihua\\Desktop\\x_train1.csv',x_train,delimiter=',')

y_train_OneHot = np_utils.to_categorical(y_train, n_classes)
y_test_OneHot = np_utils.to_categorical(y_test, n_classes)

model = Sequential()
model.add(SimpleRNN(256,
               batch_input_shape=(None,2,500),
               return_sequences=True))
model.add(Dropout(0.5))

model.add(SimpleRNN(64,
               batch_input_shape=(None,2,500),
               return_sequences=False))
model.add(Dropout(0.5))

# model.add(SimpleRNN(n_hidden,
#                batch_input_shape=(None,2,500),
#                unroll=True))
# model.add(GRU(n_hidden,
#                batch_input_shape=(None,2,500),
#                unroll=True))


model.add(Dense(n_classes))#输出层
model.add(Activation('softmax'))

model.summary()
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

train_history = model.fit(x_train, y_train_OneHot,
          batch_size=650,
          epochs=250,
          verbose=2,
          validation_split=0.3)

scores = model.evaluate(x_test, y_test_OneHot, verbose=2)

import matplotlib.pyplot as plt
def show_train_history(train_history,train,validation):
    plt.plot(train_history.history[train])
    plt.plot(train_history.history[validation])
    plt.title('Train History')
    plt.ylabel(train)
    plt.xlabel('Epoch')
    plt.legend(['train','validation'],loc='upper left')
    plt.show()

#画出准确率执行结果
show_train_history(train_history,'accuracy','val_accuracy')
#画出误差执行结果
show_train_history(train_history,'loss','val_loss')

#测试数据进行预测
predict_x=model.predict(x_test)  
classes_x=np.argmax(predict_x,axis=1)
prediction=classes_x

np.savetxt('C:\\Users\\yihua\\Desktop\\P_RNN_predict.csv',prediction,delimiter=',')
# np.savetxt('C:\\Users\\yihua\\Desktop\\Z_LSTM_predict.csv',prediction,delimiter=',')


y_test=y_test.values.reshape(594)

#换混淆矩阵
import pandas as pd
pd.crosstab(y_test,prediction,rownames=['label'],colnames=['predict'])
